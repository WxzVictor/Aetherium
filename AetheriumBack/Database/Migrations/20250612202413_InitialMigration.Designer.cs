// <auto-generated />
using System;
using AetheriumBack.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AetheriumBack.Migrations
{
    [DbContext(typeof(AetheriumContext))]
    [Migration("20250612202413_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AetheriumBack.Models.Airport", b =>
                {
                    b.Property<string>("AirportCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("AirportCode");

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("AirportName");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("City");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CountryCode");

                    b.Property<int>("ElevationFeet")
                        .HasColumnType("int")
                        .HasColumnName("ElevationFeet");

                    b.Property<float>("Latitude")
                        .HasColumnType("real")
                        .HasColumnName("Latitude");

                    b.Property<float>("Longitude")
                        .HasColumnType("real")
                        .HasColumnName("Longitude");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("RegionCode");

                    b.HasKey("AirportCode");

                    b.ToTable("Airport", "Aetherium");
                });

            modelBuilder.Entity("AetheriumBack.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<string>("AirlineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AirlineName");

                    b.Property<string>("ArrivalAirportCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ArrivalAirportCode");

                    b.Property<DateTimeOffset>("ArrivalTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ArrivalTime");

                    b.Property<string>("DepartureAirportCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("DepartureAirportCode");

                    b.Property<DateTimeOffset>("DepartureTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DepartureTime");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("DurationMinutes");

                    b.Property<string>("FlightCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("FlightCode");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("Price");

                    b.HasKey("FlightId");

                    b.HasIndex("ArrivalAirportCode");

                    b.HasIndex("DepartureAirportCode");

                    b.ToTable("Flight", "Aetherium");
                });

            modelBuilder.Entity("AetheriumBack.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<DateTimeOffset>("CheckInTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CheckInTime");

                    b.Property<DateTimeOffset>("CheckOutTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CheckOutTime");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("City");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ContactNumber");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Country");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("HotelName");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PricePerNight");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Rating");

                    b.HasKey("HotelId");

                    b.ToTable("Hotel", "Aetherium");
                });

            modelBuilder.Entity("AetheriumBack.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int")
                        .HasColumnName("DiscountPercentage");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EndDate");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartDate");

                    b.HasKey("OfferId");

                    b.HasIndex("FlightId")
                        .IsUnique();

                    b.HasIndex("HotelId");

                    b.ToTable("Offer", "Aetherium");
                });

            modelBuilder.Entity("AetheriumBack.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ReservationDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ReservationDateTime");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("FlightId");

                    b.HasIndex("SeatId")
                        .IsUnique()
                        .HasFilter("[SeatId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Aetherium");
                });

            modelBuilder.Entity("AetheriumBack.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("SeatClass")
                        .HasColumnType("int")
                        .HasColumnName("SeatClass");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeatNumber");

                    b.Property<bool>("SeatStatus")
                        .HasColumnType("bit")
                        .HasColumnName("SeatStatus");

                    b.Property<int>("SeatType")
                        .HasColumnType("int")
                        .HasColumnName("SeatType");

                    b.HasKey("SeatId");

                    b.HasIndex("FlightId");

                    b.ToTable("Seat", "Aetherium");
                });

            modelBuilder.Entity("AetheriumBack.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<DateTimeOffset>("SignUpDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("SignUpDate");

                    b.HasKey("UserId");

                    b.ToTable("User", "Aetherium");
                });

            modelBuilder.Entity("AetheriumBack.Models.UserStat", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTimeOffset>("FirstFlight")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("FirstFlight");

                    b.Property<DateTimeOffset>("LastFlight")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastFlight");

                    b.Property<string>("MostUsedAirline")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MostUsedAirline");

                    b.Property<int>("TimesInFirstClass")
                        .HasColumnType("int")
                        .HasColumnName("TimesInFirstClass");

                    b.Property<int>("TotalFlights")
                        .HasColumnType("int")
                        .HasColumnName("TotalFlights");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int")
                        .HasColumnName("TotalHours");

                    b.Property<decimal>("TotalSpent")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalSpent");

                    b.HasKey("UserId");

                    b.ToTable("UserStat", "Aetherium");
                });

            modelBuilder.Entity("AetheriumBack.Models.Flight", b =>
                {
                    b.HasOne("AetheriumBack.Models.Airport", "ArrivalAirport")
                        .WithMany("ArrivingFlights")
                        .HasForeignKey("ArrivalAirportCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AetheriumBack.Models.Airport", "DepartureAirport")
                        .WithMany("DepartingFlights")
                        .HasForeignKey("DepartureAirportCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("AetheriumBack.Models.Offer", b =>
                {
                    b.HasOne("AetheriumBack.Models.Flight", "Flight")
                        .WithOne("Offer")
                        .HasForeignKey("AetheriumBack.Models.Offer", "FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AetheriumBack.Models.Hotel", "Hotel")
                        .WithMany("Offer")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("AetheriumBack.Models.Reservation", b =>
                {
                    b.HasOne("AetheriumBack.Models.Flight", "Flight")
                        .WithMany("Reservation")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AetheriumBack.Models.Seat", "Seat")
                        .WithOne("Reservation")
                        .HasForeignKey("AetheriumBack.Models.Reservation", "SeatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AetheriumBack.Models.User", "User")
                        .WithMany("Reservation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Seat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AetheriumBack.Models.Seat", b =>
                {
                    b.HasOne("AetheriumBack.Models.Flight", "Flight")
                        .WithMany("Seat")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("AetheriumBack.Models.Airport", b =>
                {
                    b.Navigation("ArrivingFlights");

                    b.Navigation("DepartingFlights");
                });

            modelBuilder.Entity("AetheriumBack.Models.Flight", b =>
                {
                    b.Navigation("Offer")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("AetheriumBack.Models.Hotel", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("AetheriumBack.Models.Seat", b =>
                {
                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("AetheriumBack.Models.User", b =>
                {
                    b.Navigation("Reservation");
                });
#pragma warning restore 612, 618
        }
    }
}
